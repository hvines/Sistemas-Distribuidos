# version: '3.8'

services:
  mongodb:
    image: mongo:6.0
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo_data:/data/db
    networks:
      - my-network
      


  mongo-express:
    image: mongo-express:latest
    restart: always
    depends_on:
     - mongodb
    environment:
      ME_CONFIG_BASICAUTH: 'false'  
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin123
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongodb:27017/?authSource=admin
    ports:
      - "8081:8081"
    networks:
      - my-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    platform: linux/amd64
    restart: always
    depends_on:
      redis:
        condition: service_healthy
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8082:8081"
    networks:
      - my-network


  redis:
      image: redis:7.0
      restart: always
      ports:
        - "6379:6379"
      networks:
        - my-network
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 10s
        timeout: 5s
        retries: 5

  waze-scraper:
      build: ./scraper
      depends_on:
        - mongodb
        - redis
      environment:
        MONGO_URI: "mongodb://root:example@mongodb:27017/?authSource=admin"
        REDIS_HOST: redis
      networks:
        - my-network

  traffic-generator:
    build:
      context: ./traffic-generator
    container_name: traffic_generator
    depends_on:
      - waze-scraper
    environment:
      GENERATOR_API_URL: http://waze-scraper:5000/ingest
      EVENTS_PER_SEC: 10
      DISTRIBUTION: poisson
    networks:
      - my-network

volumes:
  mongo_data:
  redis_data:

networks:
  my-network:
    driver: bridge